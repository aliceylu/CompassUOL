YAML - usada para arquivos de configuração.
Configura o DOCKER COMPOSE.
Extensão yml ou yaml

-----------------------
Geralmente possui chaves e valores, onde vamos retirar as configurações do sistema.
Para definir uma chave apenas inserimos o nome dela, em seguida colocamos dois pontos e depois o valor.

-----------------------
(on app.py)

import yaml

if __name__ == '__main__':

    stream = open("test.yaml", "r")
    dictionary = yaml.safe_load(stream)

    for key, value in dictionary.items():
        print(key + " : " + str(value))


-----------------------
ESPAÇAMENTO E INDENTAÇÃO:
O fim de uma linha indica o fim de uma instrução (sem ponto/virgula)
A indentação deve conter um ou mais espaços, não deve utilizar tab.
O espaço é obrigatório após declaração da chave.
Comentários com #, o processador ignora.

STRINGS: válidas com ou sem aspas.

DADOS NULOS: ~ ou null / Irão resultar None após a interpretação.

BOOLEANOS: True e On = verdadeiro / False e Off = falso

ARRAYS: Tipos de dados para listas, possuem duas sintaxes:
[1, 2, 3, 4, 5]
Items: # mais utilizada
  - 1
  - 2
  - 3

DICIONÁRIOS: obj: {a: 1, b: 2, c: 3}
objeto:  # nesting
  chave: 1
  chave: 2

-----------------------
(on test.yaml)

nome: "Alice"
idade: 27

# Este objeto descreve o projeto.
objeto:
  versao: 2
  arquivo: "teste.txt"

versao: 2
versao_completa: 3.14 # float / sempre com pontos

string_sem_aspas: Digite um texto aqui
texto: "Este tambem e um texto valido para o YAML"

nulo: ~
nulo_dois: null

verdadeiro: True
verdadeiro_dois: On

falso: False
falso_dois: Off

lista: [1, 2, 3, 4, 5]

lista_dois:
  - "teste"
  - 10
  - outro teste
  - True

obj: {a: 1, b: 2, c: 3, objeto_interno: {a: 1}}


objeto:
  a: 1
  b: 2
    objeto_interno:
      x: 2