DOCKER COMPOSE
Ferramenta para rodar múltiplos containers.
Apenas um arquivo de configuração, que orquestra totalmente esta situação.
É uma forma de rodar múltiplos builds e runs com um comando.
Em projetos maiores é essencial seu uso.

docker compose --version  # versão

-------------------
Criar um arquivo na raíz do projeto.
Este arquivo vai coordenar os containers e imagens, e possui algumas chaves muito utilizadas.
version: versão do Compose
services: Containers/serviços que vão rodar nessa aplicação
volumes: possível adição de volumes

-------------------
docker-compose.yml
-------------------
version: '3.3'

services:
  db: # Container de MySQL
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always  # compose do arquivo rodando sempre na ult atual
    environment:
      MYSQL_ROOT_PASSWORD: wordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: usuario
      MYSQL_PASSWORD: secret

  wordpress:  # aplicação WEB, é um serviço
    depends_on:
      - db
    image: wordpress:latest
    ports:
      - "8000:80"
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: usuario
      WORDPRESS_DB_PASSWORD: secret
      WORDPRESS_DB_NAME: wordpress

volumes:
  db_data: {}

-------------------
RODAR O COMPOSE
docker compose up

Pode ser executado em modo detached com a flag -d no comando.
docker compose up -d

PARAR:
docker compose down  # docker ps -a será listado

-------------------
VARIÁVEIS DE AMBIENTE: útil quando o dado a ser inserido é sensível/não pode ser compartilhado (senhas)
Definir um arquivo base em env_file
As variáveis podem ser chamadas pela sintaxe: ${VARIAVEL}

-------------------
on db.env:

MYSQL_ROOT_PASSWORD=wordpress
MYSQL_DATABASE=wordpress
MYSQL_USER=usuario
MYSQL_PASSWORD=secret

on wp.env:

WORDPRESS_DB_HOST=db:3306
WORDPRESS_DB_USER=usuario
WORDPRESS_DB_PASSWORD=secret
WORDPRESS_DB_NAME=wordpress

on docker-compose.yaml:

no lugar do código acima, substituir:
services:
  db: # Container de MySQL
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    env_file:
      - ./config/db.env


  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    ports:
      - "8000:80"
    restart: always
    env_file:
      - ./config/qp.env


---------------
REDES:
O compose cria uma rede básica Bridge
Podemos isolar as redes com a chave networks
Podemos conectar apenas os containers que optarmos e definir drivers.

----------------
services:
  db: # Container de MySQL
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    env_file:
      - ./config/db.env
    networks:
      - backend

  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    ports:
      - "8000:80"
    restart: always
    env_file:
      - ./config/qp.env
    networks:
      - backend

volumes:
  db_data: {}
networks:
  backend:


  ----------------

BIND MOUNT
Garante a atualização em tempo real dos arquivos do container.
File Sharing em Resouses no Docker - adicionar outros locais.

----------
docker-compose ps
retorna um resumo dos serviços que sobem ao rodar o compose.
